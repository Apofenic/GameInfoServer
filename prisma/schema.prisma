// Game Info Server Prisma Schema
// Schema documentation: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
  output   = "../src/generated/prisma"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model ApiKey {
  id        Int      @id @default(autoincrement())
  key       String   @unique
  name      String   // Descriptive name for the key
  isActive  Boolean  @default(true)
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  lastUsed  DateTime?
}

model Platform {
  id           Int      @id @default(autoincrement())
  name         String   @unique
  manufacturer String?
  releaseYear  Int?
  generation   String?
  type         String?  // Console, Handheld, PC, Mobile, Arcade, etc.
  discontinued Boolean  @default(false)
  createdAt    DateTime @default(now())
  updatedAt    DateTime @updatedAt

  games Game[]
}

model Game {
  id             Int      @id @default(autoincrement())
  createdAt      DateTime @default(now())
  updatedAt      DateTime @updatedAt
  title          String
  platformId     Int      // Required foreign key to Platform
  releaseDate    DateTime
  developer      String?
  publisher      String?
  genre          String?
  generation     String?
  metascore      Int?
  userscore      Int?
  coverArtUrls   String?
  screenShotUrls String?
  summary        String?
  notes          String?

  lists List[] @relation("ListGames")
  platform Platform @relation(fields: [platformId], references: [id])
  
  // Constraints
  @@unique([title, platformId], name: "title_platform")
}

model List {
  id     Int    @id @default(autoincrement())
  title  String
  userId Int
  user  User   @relation(fields: [userId], references: [id])
  games Game[] @relation("ListGames")
}

model User {
  id       Int     @id @default(autoincrement())
  email    String  @unique
  password String  // Hashed password
  name     String?
  lists    List[]
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}
